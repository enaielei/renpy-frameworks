init python:
    import math

init python in utils.helper:
    import store, os, sys, io, json
    from store import utils
    from store import renpy, Movie
    from pprint import pprint

    _print = print

    def print(*args, **kwargs):
        stream = io.StringIO()
        sep = kwargs.pop("sep", "\n")
        strs = []
        for a in args:
            stream.truncate(0)
            stream.seek(0)
            pprint(a, stream, **kwargs)
            strs.append(stream.getvalue()[:-1])

        _print(*strs, sep=sep)

    def list_files(directory="", common=False, recursive=True):
        if directory: directory = directory.rstrip('/') + '/'
        paths = tuple(
            fp for fp in renpy.list_files(common) if fp.startswith(directory))
        if not recursive:
            paths = tuple(p for p in paths if \
                (os.path.dirname(p) + "/") == directory
            )
        return paths

    def list_directories(directory="", common=False, recursive=True):
        paths = list_files(directory, common, recursive)
        npaths = []
        if directory: directory = directory.rstrip('/')
        for p in paths:
            dir = os.path.dirname(p)
            if dir != directory and dir not in npaths: npaths.append(dir)
        return tuple(npaths)

    def unpack(dct, *keys, **kwargs):
        if "default" in kwargs: default = kwargs.pop("default")
        return (dct.get(k, default) for k in keys)

    def find(condition, iterable, default=None):
        return next(filter(condition, iterable), default)

    def index(condition, iterable, default=-1):
        return find(lambda e: condition(e[1]), enumerate(iterable), (-1,))[0]

    def ensureattr(obj, name, default=None):
        if not hasattr(obj, name): setattr(obj, name, default)
        return getattr(obj, name)

    def ensurekey(dct, name, default=None):
        if name not in dct: dct[name] = default
        return dct[name]

    def screen_get(screen, name, value, default=None, layer=None):
        if isinstance(screen, basestring):
            screen = renpy.get_screen(screen, layer)

        return screen.scope[name] if screen else default

    def screen_set(screen, name, value, layer=None):
        if isinstance(screen, basestring):
            screen = renpy.get_screen(screen, layer)

        if screen: screen.scope[name] = value
        # if screen: sys._getframe(1).f_locals[name] = value

    def ScreenGet(screen, name, value, default=None, layer=None):
        return store.Function(screen_get, screen, name, value, default, layer)

    def ScreenSet(screen, name, value, layer=None):
        return store.Function(screen_set, screen, name, value, layer)

    def Action(method):
        def _Action(self, *args, **kwargs):
            name = getattr(self, method)
            return store.Function(name, *args, **kwargs)

        return _Action

    def action(function):
        setattr(function, "Action", Action(function.__name__))
        return function

    def set_action(cls, *names):
        from functools import partial
        for name in names:
            if isinstance(name, (tuple, list, set)):
                name, aname = name
            else: aname = name.title()

            setattr(cls, aname, Action(name))