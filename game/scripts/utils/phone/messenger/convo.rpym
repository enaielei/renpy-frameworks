init python in utils.phone.messenger:
    renpy.load_module("scripts/utils/record")
    renpy.load_module("scripts/utils/phone/messenger/message")
    
    import store
    from store import utils
    from store.utils import helper

    class Convo(utils.Record):
        @property
        def messages(self):
            return Message.get_all(lambda e: e.receiver == self)

        @property
        def typings(self):
            return Typing.get_all(lambda e: e.receiver == self)

        def __init__(self, name=None, user=None, *members):
            utils.Record.__init__(
                self,
                name=name,
                user=user,
                _members=(user,) + members,
            )

        def on_create(self):
            self.add(*self._members)
            self._members = ()

        @helper.action
        def add(self, *members):
            Membership.add(self, *members)

        @helper.action
        def remove(self, *members):
            Membership.remove(self, *members)

        @helper.action
        def message(self, *users, **kwargs):
            for user in users: Message.add(user, self, **kwargs)

        @helper.action
        def type(self, *users):
            for user in users: Typing.add(user, self)

        @helper.action
        def untype(self, *users):
            for user in users: Typing.remove(user, self)

        @helper.action
        def type_for(self, *users, **kwargs):
            self.type(*users)
            renpy.pause(**kwargs)
            self.untype(*users)

        @helper.action
        def type_message(self, *users, **kwargs):
            pref = "pause_"
            pkwargs = {}
            for k, v in tuple(kwargs.items()):
                if not k.startswith(pref): continue
                pkwargs[k.removeprefix(pref)] = kwargs.pop(k)

            self.type_for(*users, **pkwargs)
            self.message(*users, **kwargs)

        def get_membership(self, user):
            if not user.created: return
            mem = Membership.get(lambda e: e.user == user and e.convo == self)
            return mem